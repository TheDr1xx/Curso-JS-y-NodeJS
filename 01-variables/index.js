// üî§ DECLARACI√ìN DE VARIABLES EN JAVASCRIPT
// En JavaScript existen tres maneras principales de declarar variables: var, let y const.
// Cada una tiene sus diferencias, y es importante entenderlas para evitar errores.

// ------------------------------------------------------------------------
// 1Ô∏è‚É£ var ‚Üí LA ANTIGUA FORMA (NO RECOMENDADA HOY EN D√çA)
// ------------------------------------------------------------------------
// - Fue la primera forma de declarar variables en JS (antes de ES6).
// - Tiene "scope" (alcance) de funci√≥n o global, lo que puede generar errores
//   si sin querer la redeclaramos en un bloque.
// - Se puede cambiar su valor y volver a declararla en el mismo √°mbito (poco seguro).
// - Hoy en d√≠a se evita usarla, salvo en casos MUY espec√≠ficos.
var nombre = "Carlos";
console.log("var:", nombre); // Carlos

// ------------------------------------------------------------------------
// 2Ô∏è‚É£ let ‚Üí LA FORMA MODERNA Y FLEXIBLE
// ------------------------------------------------------------------------
// - Introducida en ES6 (2015).
// - Tiene "scope" (alcance) de bloque: solo existe dentro del bloque donde se declar√≥.
// - Permite cambiar su valor, pero NO permite volver a declararla en el mismo √°mbito.
// - Es la opci√≥n m√°s usada para variables que van a cambiar su valor.
let edad = 25;
console.log("let antes:", edad); // 25
edad = 26; // ‚úÖ Pod√©s cambiar su valor
console.log("let despu√©s:", edad); // 26
// let edad = 30; ‚ùå Esto dar√≠a error si lo haces en el mismo bloque

// ------------------------------------------------------------------------
// 3Ô∏è‚É£ const ‚Üí PARA CONSTANTES (NO CAMBIAN SU REFERENCIA)
// ------------------------------------------------------------------------
// - Tambi√©n introducida en ES6 (2015).
// - Tiene "scope" de bloque, igual que let.
// - Su valor NO se puede reasignar.
// - OJO: si es un objeto o array, pod√©s cambiar su contenido interno,
//   pero no pod√©s reasignar la variable a otra cosa.
const pais = "Uruguay";
console.log("const:", pais);
// pais = "Argentina"; // ‚ùå Esto dar√≠a error: Assignment to constant variable

// Ejemplo con array usando const:
const frutas = ["manzana", "pera"];
frutas.push("naranja"); // ‚úÖ Podemos modificar su contenido
console.log(frutas); // ["manzana", "pera", "naranja"]
// frutas = ["uva"]; // ‚ùå Esto NO se puede hacer

// ------------------------------------------------------------------------
// üìö TIPOS DE DATOS B√ÅSICOS EN JAVASCRIPT
// ------------------------------------------------------------------------
// Los m√°s comunes son:
// - String ‚Üí Texto
// - Number ‚Üí N√∫meros enteros o decimales
// - Boolean ‚Üí true o false
// - Undefined ‚Üí Sin valor asignado
// - Null ‚Üí Valor vac√≠o intencionalmente
// - Object ‚Üí Estructuras de datos
let texto = "Hola mundo";    // String
let numero = 42;             // Number
let decimal = 3.14;          // Number (decimal)
let esVerdadero = true;      // Boolean
let indefinido = undefined;  // Undefined
let nulo = null;             // Null

// ------------------------------------------------------------------------
// üîé MOSTRAR EL TIPO DE DATO CON typeof
// ------------------------------------------------------------------------
console.log(typeof texto);       // "string"
console.log(typeof numero);      // "number"
console.log(typeof decimal);     // "number"
console.log(typeof esVerdadero); // "boolean"
console.log(typeof indefinido);  // "undefined"
console.log(typeof nulo);        // "object" ‚Üê Esto es un bug hist√≥rico de JS

// ------------------------------------------------------------------------
// ü§Ø JAVASCRIPT ES DE TIPADO DIN√ÅMICO
// ------------------------------------------------------------------------
// Esto significa que una variable puede cambiar de tipo en cualquier momento
// sin dar error.
let algo = "Soy texto"; // string
console.log(algo);
algo = 123; // ahora es number
console.log(algo);
